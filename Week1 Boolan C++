Week1

1. Header Guard
#ifndef __XXX__
#def __XXX__

  class declaration
  class body

#endif

2. template 

template <typename T> T abc(T a, T b)
{
	return (a+b);
}

3. Inline vs Marco

#define ADD(a,b) (a+b)

inline int ADD(int a, int b)
{
	return (a+b);
}
Similarity:
  save function excess time
Different:
  a.inline function are parsed and expanded by the complier, whereas macros are just textual substitution and expanded by the preprocessor
  b.inline functions can be overloaded
  c.Based on my experince, macros are used for code reuse wherars the inline function are used to  during function call.
  
4. Public, private, protect

   Public: are accessible by anywhere.
   Private: are accessible only from the same class or from friends
   protected: are accessible from the same class or from friends or drived classess
   
5. friend
   A function defined outside the class' scopt but has access all private and protected members of the class
   
6. Const
Const must be initialized
  a. const variable
 	 const int a = 1ï¼›
  b. const member functions
     class A{ void a() const;} 
     const functions does not allow to modify the object on which they are called
     
  c. const member variable
     class A{ const int a;} 
     const member variable cannot be changed
     
  d. const object
  	const object can not invoke non-const member function
	
  e. Pointor to const
  	const int *a = NULL;
  f. Const pointor
  	char * const a = NULL;
  
7. Constructor
  constructor's name is as same as class name
  no return value
  cannot be const
  a.default argument
  class complex{
  public:
  	complex ( double r=0, double i=0){}
  private: double re,im;
  }
  b.initialization list
  class complex{
  public:
  	complex ( double r=0, double i=0) : re(r), im(i){}
  private: double re,im;
  }
  c.assignments
   public:
  	complex ( double r=0, double i=0) : re(r), im(i){ re =rl im =i;}
   private: double re,im;
  } 
  d.constructor overloading
   public:
  	complex ( double r=0, double i=0) : re(r), im(i){ re =rl im =i;}
	complex () : re(0), im(0) {}
   private: double re,im;
  }  
  e. const member functions
   public:
  	complex ( double r=0, double i=0) : re(r), im(i){ re =rl im =i;}
	complex () : re(0), im(0) {}
	double real () const { return re;}
	double imag () const { return im;}
   private: double re,im;
  }  
    
8. pass by value vs pass by reference
pass by reference 
the address of outside function and the variable of inside function which is modifed are same.
So pass by reference can change the variable which is modified after the function call.

pass by value
the address of outside function and the variable of inside function which is modifed are different.
So pass by reference cannot change the variable which is modified after the function call.

9. return by value vs return by reference
return by value
When a value is returned by value, a copy of that value is returned to the caller.

return by reference
Returning by address involves returning the address of a variable to the caller.

10. Operator overloading 

11. Features of OOP
    a.Abstraction
    b Polymorphism
    c.Inheritance
    d Encapsulation
12. Two categories in Class
    class without pointer members
    class with pointer member
   


